

z={}
listOfmatches={}
funcToFile={}
funcXfileDeclr={}
expByFile= {}

funcList = [
  "setI",
  "readFile",
  "writeFile",
  "readExtFile",
  "writeExtFile",
  "getHomePath",
  "fileExists",
  "profFileExists",
  "extFileExists",
  "chromeFileExists",
  "readDir",
  "eraseFile",
  "fileSaveDialog",
  "writeFileToDesk",
  "writeToDesktop",
  "eraseItem",
  "eraseAll",
  "changeName",
  "eventSend",
  "openPlace",
  "openXMLindex",
  "importXMLindex",
  "sendPaliXML",
  "sendDPPNXML",
  "sendAtt",
  "sendTitle",
  "sendPlace",
  "sendUpdateBookmarks",
  "sendAnalysisToOutput",
  "sendTranslate",
  "openTranslation",
  "createBrowser",
  "createSplitter",
  "getBrowserCount",
  "reindexPanels",
  "closePanel",
  "sidebarSearch",
  "getLinkPlace",
  "makeLinkPlace",
  "makeLocPlace",
  "makeNewPanelPlace",
  "makeNewPanelIndex",
  "sendTextPad",
  "makekVaggas",
  "getSuttaNumber",
  "getSuttaFromNumber",
  "vssCalc",
  "convertShortLink",
  "loadPreference",
  "savePreferences",
  "getPref",
  "logTelemetry",
  "resetAllDprSettings",
  "toUni",
  "toUniRegEx",
  "toVel",
  "toVelRegEx",
  "toFuzzy",
  "toSkt",
  "toSin",
  "fromSin",
  "toMyanmar",
  "toBengali",
  "toDeva",
  "toTelugu",
  "toThai",
  "fromThai",
  "translit",
  "getconfig",
  "changecss",
  "checkbackground",
  "addATIJS",
  "addJS",
  "loadXMLFile",
  "getBookName",
  "getDppnEntry",
  "copyToClipboard",
  "outputFormattedData",
  "formatuniout",
  "preparepali",
  "wrapLink",
  "convtitle",
  "analyzeTextPad",
  "permalinkClick",
  "alertFlash",
  "fadeInOut",
  "fadeIn",
  "fadeOut",
  "clearDivs",
  "makeToolbox",
  "makeTable",
  "linkToPED",
  "joinArray",
  "getNameHTML",
  "loadXMLSection",
  "resolveCommands",
  "loadXMLindex",
  "createShortcutFns",
  "saveCompilation",
  "compareVersions",
  "iterCompare",
  "countVals",
  "removeHistory",
  "clearHistory",
  "getHistory",
  "addHistory",
  "DPR_PAL_Search_SetTitle",
  "DPR_PAL_Search_ShowProgressBar",
  "DPR_PAL_Search_MakeProgressTable",
  "DPR_PAL_Search_UpdateProgressBar",
  "DPR_PAL_Search_HideProgressBar",
  "DPR_PAL_Search_ShowCancelButton",
  "DPR_PAL_Search_HideCancelButton",
  "DPR_PAL_Search_InitializeSectionLinks",
  "DPR_PAL_SearchAddSearchTermSectionLink",
  "DPR_PAL_Search_AddSectionLink",
  "DPR_PAL_Search_UpdateSectionLink",
  "DPR_PAL_Search_AddSearchTermSectionInfo",
  "DPR_PAL_Search_UpdateSearchTermSectionInfo",
  "DPR_PAL_Search_FixPluralInSearchTermSectionInfo",
  "DPR_PAL_Search_AddCopyPermaLinkElement",
  "DPR_PAL_Search_RemoveCopyPermaLinkElement",
  "DPR_PAL_Search_CreateSectionHeader",
  "searchTipitaka",
  "stopSearch",
  "scrollSearch",
  "DPR_PAL_Search_ScrollSearch",
  "resetvalues",
  "finishSearch",
  "DPR_PAL_Search_ClearSearchResults",
  "pausesall",
  "pausetwo",
  "pausethree",
  "bounce",
  "importXMLs",
  "createTdForMatch",
  "createTables",
  "normalizeLongSearchResult",
  "showonly",
  "atiPause",
  "atiSearchStart",
  "atiSearchOffline",
  "findRegEx",
  "getRegExtSearchString",
  "searchHistoryXML",
  "eraseSearchHistory",
  "sameSearchHistory",
  "simSearchHistory",
  "saveSearchHistory",
  "dictHistoryXML",
  "eraseDictHistory",
  "saveDictHistory",
  "sortaz",
  "sortStrip",
  "comparePaliAlphabet",
  "findSimilarWords",
  "groupBySimilarity",
  "removeDuplicatesFromArray",
  "moveframey",
  "parseDictURLParameters",
  "startDictLookup",
  "pedsearchstart",
  "pedFullTextSearch",
  "dppnsearchstart",
  "dppnFullTextSearch",
  "mlsearchstart",
  "multisearchstart",
  "epdsearchstart",
  "attsearchstart",
  "tiksearchstart",
  "titlesearchstart",
  "paliRootsearchstart",
  "sktsearchstart",
  "sktRootsearchstart",
  "makeUniqueStringForCaseInsensitiveFS",
  "paliXML",
  "toggleDppnTitle",
  "DPPNXML",
  "sktRXML",
  "sktXML",
  "getAtthXML",
  "getTitleXML",
  "getDppnData",
  "displayDictData",
  "openFirstDPRTab",
  "openDPRTab",
  "findDPRTab",
  "findDPRTabs",
  "findDPRTabByLoc",
  "updatePrefs",
  "isDPRTab",
  "giveIDtoTabs",
  "checkLastTab",
  "DPRSidebarWindow",
  "DPRSidebarDocument",
  "closeDPRSidebar",
  "openDPRSidebar",
  "toggleDPRSidebar",
  "setCurrentTitle",
  "closeBrowser",
  "DPRBottomPaneUpdateStyle",
  "DPRShowBottomPane",
  "getSelected",
  "convert",
  "changeConversion",
  "clearboth",
  "sendtoconvert",
  "sendtoPad",
  "clearPad",
  "savePad",
  "moveframex",
  "moveframec",
  "closeCP",
  "openCP",
  "cpFlatten",
  "showHideId",
  "moves",
  "moveanf",
  "scrolldown",
  "getlink",
  "go_anchor",
  "scrollToId",
  "makeDeclensions",
  "outputAnalysis",
  "analyzeword",
  "findmatch",
  "manualCompound",
  "isIndec",
  "isUncomp",
  "outputDef",
  "showShortDef",
  "conciseChange",
  "reanalyze",
  "conjugate",
  "conjugateNoun",
  "conjugateVerb",
  "conjugateIrrNoun",
  "conjugateIrrVerb",
  "conjugateWord",
  "formatConjugation",
  "getConjugation",
  "makeGrammarTerms",
  "typeAndGender",
  "conjugateWords",
  "bv",
  "showBv",
  "citation",
  "bvAlert",
  "translateTextx",
  "translateText",
  "arrangeWords",
  "checkCompatibleNoun",
  "checkCompatibleVerb",
  "makeWord",
  "translateWord",
  "transMod",
  "addPlural",
  "addPhrasePreps",
  "sortLongerDec",
  "stripEnglish",
  "simpleWordTranslation",
  "showAltTable",
  "changeAlt",
  "insertWordByWord",
  "clearText",
  "insertConj",
  "DPR_keypress",
  "createCommands",
  "moveFrame",
  "devO",
  "dalert",
  "ddump",
  "mainInitialize",
  "installGlobalHandlers",
  "triggerUpdateCheck",
  "setupBTForRG"
]#Object.keys(window).filter(a => !( whitelist.includes(a) || initObjList.includes(a)))


declList = [
  "function setI () {",
  "function readFile (aFileKey) {",
  "function writeFile (aFileKey, aContent) {",
  "function readExtFile (fileLoc) {",
  "function writeExtFile (fileLoc, aContent) {",
  "function getHomePath () {",
  "function fileExists (aFileKey) {",
  "function profFileExists (file) {",
  "function extFileExists (fileLoc) {",
  "function chromeFileExists (fileLoc) {",
  "function readDir () {",
  "function eraseFile (name) {",
  "function fileSaveDialog (title) {",
  "function writeFileToDesk (file, data) {",
  "function writeToDesktop (aFileKey, aContent) {",
  "function eraseItem (name) {",
  "function eraseAll () {",
  "function changeName (name, nam) {",
  "function eventSend(event,internal) {",
  "function openPlace([nikaya,book,meta,volume,vagga,sutta,section,hiert,alt],para,stringra,add) {",
  "function openXMLindex(nikaya,bookno,hier,add) {",
  "function importXMLindex(add) {",
  "function sendPaliXML(link,add) {",
  "function sendDPPNXML(link,add) {",
  "function sendAtt(x,type,nik,add) {",
  "function sendTitle(x,m,a,t,nik,add) {",
  "function sendPlace(place) {",
  "function sendUpdateBookmarks() {",
  "function sendAnalysisToOutput(input, divclicked, frombox, add){",
  "function sendTranslate(input, add){",
  "function openTranslation(url,add) {",
  "function createBrowser(thisDocument,url,count){",
  "function createSplitter(thisDocument,count){",
  "function getBrowserCount() {",
  "function reindexPanels() {",
  "function closePanel() {",
  "function sidebarSearch(nik,book,hiert) {",
  "function getLinkPlace() { // permalinks",
  "function makeLinkPlace(options,PL) {",
  "function makeLocPlace(inplace) {",
  "function makeNewPanelPlace([nikaya,book,meta,volume,vagga,sutta,section,hiert],count) {",
  "function makeNewPanelIndex([nikaya,book,hiert],count) {",
  "function sendTextPad(add){",
  "function makekVaggas() {",
  "function getSuttaNumber(nik,book,meta,volume,vagga,sutta,section,hier,sectlength,which) { // book, meta, etc. should be -1 (0,1,2...)",
  "function getSuttaFromNumber(is) { // should be in array format SN,1,1",
  "function vssCalc(a1,a2) { // calculate a three dimensional hierarchy",
  "function convertShortLink(place) {",
  "function loadPreference() {",
  "function savePreferences(getPrefFn) {",
  "function getPref(name) {",
  "function logTelemetry() {",
  "function resetAllDprSettings() {",
  "function toUni(input) {",
  "function toUniRegEx(input) {",
  "function toVel(input) {",
  "function toVelRegEx(input) {",
  "function toFuzzy(input){",
  "function toSkt(input,rv) {",
  "function toSin(input,type) {",
  "function fromSin(input,type) {",
  "function toMyanmar(input,type) {",
  "function toBengali(input,type) {",
  "function toDeva(input,type) {",
  "function toTelugu(input,type) {",
  "function toThai(input) {",
  "function fromThai(input) {",
  "function translit(data) {",
  "function getconfig() {",
  "function changecss(myclass,element,value) {",
  "function checkbackground() {",
  "function addATIJS() {",
  "function addJS(files) {",
  "function loadXMLFile(file, setNo) {",
  "function getBookName(nik, ht, no) { // nik is nikaya, ht is a DPR_G.G_hier, no will be xml no - 1",
  "function getDppnEntry(term) {",
  "text => {",
  "function outputFormattedData(data,which,place,shortcutFns) // calls text prep, then outputs it to preFrame",
  "function formatuniout(data,which) { // which = 1 prepare without links, 2 with links",
  "function preparepali(data,which) { // standard text prep for algorithm",
  "function wrapLink(text,click,url) {",
  "function convtitle(nikaya,book,una,vna,wna,xna,yna,zna,hiert,oneline,click)",
  "function analyzeTextPad(text) {",
  "function permalinkClick(link,url) {",
  "function alertFlash(text,color) {",
  "function fadeInOut(AID,id, sIn, L, sOut) {",
  "function fadeIn(AID,id,speed,L,sOut) {",
  "function fadeOut(AID,id,speed) {",
  "function clearDivs(which) { // place divs to be cleared here",
  "function makeToolbox(shortcutFns,main,aux,title,conv,ex,save,trans) {",
  "function makeTable(text,cls) {",
  "function linkToPED(base,word) {",
  "function joinArray(s,a) {",
  "function getNameHTML(dEI,tt) {",
  "function loadXMLSection(querystring,para,place,isPL,scroll,compare)",
  "function resolveCommands(shortcutFns) {",
  "function loadXMLindex(place,compare) {",
  "function createShortcutFns() {",
  "function saveCompilation() {",
  "function compareVersions([nikaya,book,meta,volume,vagga,sutta,section,hier,alt],para,stringra,add) {",
  "function iterCompare(p1,p2,iter, one, two) {",
  "function countVals(a) {",
  "function removeHistory(value) {",
  "function clearHistory(cp) {",
  "function getHistory() {",
  "function addHistory(value) {",
  "function DPR_PAL_Search_SetTitle(title) {",
  "function DPR_PAL_Search_ShowProgressBar() {",
  "function DPR_PAL_Search_MakeProgressTable(maxVal) {",
  "function DPR_PAL_Search_UpdateProgressBar() {",
  "function DPR_PAL_Search_HideProgressBar() {",
  "function DPR_PAL_Search_ShowCancelButton() {",
  "function DPR_PAL_Search_HideCancelButton() {",
  "function DPR_PAL_Search_InitializeSectionLinks() {",
  "function DPR_PAL_SearchAddSearchTermSectionLink(searchTerm) {",
  "function DPR_PAL_Search_AddSectionLink(nik) {",
  "function DPR_PAL_Search_UpdateSectionLink(nikayaat, thiscount) {",
  "function DPR_PAL_Search_AddSearchTermSectionInfo(sectionInfo) {",
  "function DPR_PAL_Search_UpdateSearchTermSectionInfo(count) {",
  "function DPR_PAL_Search_FixPluralInSearchTermSectionInfo() {",
  "function DPR_PAL_Search_AddCopyPermaLinkElement() {",
  "function DPR_PAL_Search_RemoveCopyPermaLinkElement() {",
  "function DPR_PAL_Search_CreateSectionHeader(newnikaya) {",
  "function searchTipitaka(searchType,searchString,searchMAT,searchSet,searchBook,searchPart,searchRX) {",
  "function stopSearch() {",
  "function scrollSearch(what) {",
  "function DPR_PAL_Search_ScrollSearch(what) {",
  "function resetvalues() {",
  "function finishSearch() {",
  "function DPR_PAL_Search_ClearSearchResults() {",
  "function pausesall()",
  "function pausetwo() { // init function for single collection",
  "function pausethree() {",
  "function bounce(sct)",
  "function importXMLs(cnt)",
  "function createTdForMatch(dups, match) {",
  "function createTables(xmlDoc,hiert)",
  "function normalizeLongSearchResult(match) {",
  "function showonly(string) {",
  "function atiPause(getstring) {",
  "function atiSearchStart() {",
  "function atiSearchOffline(d, getstring) {",
  "function findRegEx(text,string) {",
  "function getRegExtSearchString(string) {",
  "function searchHistoryXML(){",
  "function eraseSearchHistory(gofrom)",
  "function sameSearchHistory(event){",
  "function simSearchHistory(event){",
  "function saveSearchHistory(query,searchType,rx,sets,MAT,book,part) {",
  "function dictHistoryXML(){",
  "function eraseDictHistory(gofrom)",
  "function saveDictHistory(query,type,opts) {",
  "function sortaz(mydata){  // sort pali array",
  "function sortStrip(word) {",
  "function comparePaliAlphabet(a,b) {",
  "function findSimilarWords(word,list,min,fuzzy) {",
  "function groupBySimilarity(list,minsim) {",
  "function removeDuplicatesFromArray(list){",
  "function moveframey(a,b) //dict, conv, pad, etc - a is button, b is div (opt)",
  "function parseDictURLParameters(){",
  "function startDictLookup(dictType,dictQuery,dictOpts,dictEntry) {",
  "function pedsearchstart(hard)",
  "function pedFullTextSearch(getstring) {",
  "function dppnsearchstart(hard)",
  "function dppnFullTextSearch(getstring) {",
  "function mlsearchstart(hard)",
  "function multisearchstart(hard)",
  "function epdsearchstart()",
  "function attsearchstart()",
  "function tiksearchstart()",
  "function titlesearchstart()",
  "function paliRootsearchstart(hard)",
  "function sktsearchstart()",
  "function sktRootsearchstart(hard)",
  "function makeUniqueStringForCaseInsensitiveFS(s) {",
  "function paliXML(filein,which,add)",
  "function toggleDppnTitle(link,id) {",
  "function DPPNXML(filein,which,add)",
  "function sktRXML(no,add)",
  "function sktXML(entry,idx,which,add)",
  "function getAtthXML(num,type,niklist) { // get atthakatha or tika word",
  "function getTitleXML(num,mul,att,tik,niklist) { // get titles for title search",
  "function getDppnData(link){",
  "function displayDictData(data) {",
  "function openFirstDPRTab() {",
  "function openDPRTab(permalink, id, reuse) {",
  "function findDPRTab(id,loc) {",
  "function findDPRTabs(id,loc) {",
  "function findDPRTabByLoc(loc) {",
  "function updatePrefs() {",
  "function isDPRTab(id) {",
  "function giveIDtoTabs() { // startup function, give ids to",
  "function checkLastTab() {",
  "function DPRSidebarWindow() {",
  "function DPRSidebarDocument() {",
  "function closeDPRSidebar() {",
  "function openDPRSidebar() {",
  "function toggleDPRSidebar() {",
  "function setCurrentTitle(title) {",
  "function closeBrowser(id) {",
  "function DPRBottomPaneUpdateStyle() {",
  "function DPRShowBottomPane(tabIdToActivate = 'D') {",
  "function getSelected() {",
  "function convert(check,lower)",
  "function changeConversion(inout)",
  "function clearboth()",
  "function sendtoconvert(data,shift)",
  "function sendtoPad(data,shift)",
  "function clearPad() {",
  "function savePad() {",
  "function moveframex(a,temp) //read, etc",
  "function moveframec() // open close control panel",
  "function closeCP(wR) {",
  "function openCP(wR) {",
  "function cpFlatten(cpin) {",
  "function showHideId(a) {",
  "function moves(a) // search open / close",
  "function moveanf(which) {",
  "function scrolldown(much)",
  "function getlink(which)",
  "function go_anchor(mydiv,n){",
  "function scrollToId(a,b) {",
  "function makeDeclensions(oneword,lastpart,nextpart) {",
  "function outputAnalysis(input,frombox) {",
  "function analyzeword (oneword, parts, partnames, shortdefpre, lastpart, parttrick) {",
  "function findmatch(oneword,lastpart,nextpart,partslength,trick)",
  "function manualCompound(fullword) {",
  "function isIndec(word) { // indeclinible",
  "function isUncomp(word,lp,np) { // uncompoundable",
  "function outputDef(which,first,frombox)",
  "function showShortDef(word) {",
  "function conciseChange(value) {",
  "function reanalyze(word,cancel) {",
  "function conjugate(word, id, which) {",
  "function conjugateNoun(word) {",
  "function conjugateVerb(word) {",
  "function conjugateIrrNoun(word) {",
  "function conjugateIrrVerb(word,which) {",
  "function conjugateWord(word,form) {",
  "function formatConjugation(word) {",
  "function getConjugation(form,bare) {",
  "function makeGrammarTerms([trans,type,deca,word,meta]) {",
  "function typeAndGender(t) {",
  "function conjugateWords(input) {",
  "async function bv(rnd,static) {",
  "async function showBv(rnd) {",
  "function citation(cite,event) {",
  "function bvAlert(bva) {",
  "function translateTextx() {",
  "function translateText(alts) {",
  "function arrangeWords(wordst,alts) {",
  "function checkCompatibleNoun(input,chosen,words) {",
  "function checkCompatibleVerb(input,chosen,words) {",
  "function makeWord(word,pl,alts) {",
  "function translateWord(word,idx) {",
  "function transMod([trans,type,deca,word,meta]) {",
  "function addPlural(word,type) {",
  "function addPhrasePreps(words,i,type,alts) {",
  "function sortLongerDec(a,b) {",
  "function stripEnglish(input) {",
  "function simpleWordTranslation(word) {",
  "function showAltTable(idx) {",
  "function changeAlt(e,i) {",
  "function insertWordByWord() {",
  "function clearText() {",
  "function insertConj() {",
  "function DPR_keypress(e) {",
  "function createCommands() {",
  "function moveFrame() { }",
  "function devO() { }",
  "function dalert(a) { }",
  "function ddump(a) { }",
  "async function mainInitialize() {",
  "function installGlobalHandlers() {",
  "function triggerUpdateCheck() {",
  "async function setupBTForRG() {"
]#Object.keys(window).filter(a => !( whitelist.includes(a) || initObjList.includes(a))).map(x=>window[x].toString().split('\n')[0])

while len(funcList):
  z[funcList.pop()]=declList.pop()
leftFunc = dict(z)

import re,os.path,os,json

for i in z:
  funcToFile[i]={}



def searchDeclr(line,fileName,lnNo):
  for i in leftFunc:
      x = re.match(r'.*'+re.escape(leftFunc[i]),line)
      if(x):
        print(i+" declared at line:"+str(lnNo))
        funcXfileDeclr[i]=fileName+":"+str(lnNo)
        leftFunc.pop(i)
        break

def searchCall(line,fileName,lnNo):
  for i in z:
    y = re.match(r'.*\b'+re.escape(i)+r'\b',line)
    if(y):
      print(i+" called at line:"+str(lnNo))
      if(funcToFile[i].get(fileName) is None):
        funcToFile[i][fileName]=[]
      funcToFile[i][fileName].append((lnNo))


listOfFunc2Exp = {}
funcXFile = {}

def findDeclrandCalls():
  for dirpath, dirnames, filenames in os.walk("../_dprhtml"):
    if('external' not in dirpath.split('/')):
      for filename in [f for f in filenames if f.split(".")[-1] in ["html","js"]] :
        fileName=(os.path.join(dirpath, filename))
        findInfile(fileName)

def findInfile(fileName):
        print(fileName)
        print("__________________\n")
        for i,line in enumerate(open(fileName),1):
            searchDeclr(line,fileName,i) #step 2
            searchCall(line,fileName,i) #step 3
        print("__________________\n")

findDeclrandCalls()

#step4

listOfFunc2Exp = [a for a in  funcToFile if len(funcToFile[a])>1]

DeclareVars = {a:b for (a,b) in funcXfileDeclr.items() if a in listOfFunc2Exp } # DeclareSites
ChangeVars = {a:b for (a,b) in funcToFile.items() if a in listOfFunc2Exp } # CallSites

for i in ChangeVars: #step5
    ChangeVars[i].pop(DeclareVars[i].split(":")[0],None)

finFile={}
for i in ChangeVars:
    finFile[i]={}
    finFile[i]["Declared"]=DeclareVars[i]
    finFile[i]["Called"]=ChangeVars[i]

with open("calls&Declr.json","w") as f:
    json.dump(finFile,f)

